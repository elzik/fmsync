name: Continuous Delivery

on:
  [push, pull_request, workflow_dispatch]

jobs:
  continuous-delivery:

    runs-on: ${{ matrix.os }}

    strategy:
            matrix:
                os: [windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x
    - name: Build & Test
      run: ./Build/build-and-test.ps1
      shell: pwsh  
    - name: Upload Coverage Badge
      if: github.event_name != 'pull_request' && matrix.os == 'windows-latest'
      uses: exuanbo/actions-deploy-gist@v1
      with:
        token: ${{ secrets.CODE_COVERAGE_AUTH_TOKEN }}
        gist_id: 527882e89a938dc78f61a08c300edec4
        gist_description: "code-coverage-${{ github.ref_name }}"
        gist_file_name: fmsync-code-coverage-${{ github.ref_name }}.svg
        file_path: tests/TestResults/badge_shieldsio_linecoverage_green.svg
    - name: Build Windows Installer
      if: matrix.os == 'windows-latest'
      run: ./Build/build-windows-installer.ps1
      shell: pwsh
    - name: Check if PR Exists
      id: prcheck
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        prs=$(gh pr list \
            --repo "$GITHUB_REPOSITORY" \
            --json baseRefName,headRefName \
            --jq '
                map(select(.baseRefName == "main" and .headRefName == "${{ github.ref_name }}"))
                | length
            ')
        if ((prs > 0)); then
            echo "pull_request_exists=true" >> "$GITHUB_OUTPUT"
        fi
    - name: Tag With SemVer
      id: tag
      if: github.ref_name == 'main'
      run: ./Build/tag-with-semver.ps1
      shell: pwsh
    - name: Debug Output
      run: |
        Write-Output "github.ref_name:${{ github.ref_name }}"
        Write-Output "github.event_name:${{ github.event_name }}"
        Write-Output "github.ref:${{ github.ref }}"
        $tag = git describe --tags --abbrev=0
        Write-Output "tag:$tag"
        Write-Output "env.GitVersion_SemVer:${{ env.GitVersion_SemVer }}"
        Write-Output "steps.prcheck.outputs.pull_request_exists:${{ steps.prcheck.outputs.pull_request_exists }}"
      shell: pwsh
    - name: Release
      uses: softprops/action-gh-release@v1 
      if: github.ref_name == 'main' || (github.event_name == 'push' && contains(github.ref, 'refs/tags/'))
      with:
        tag_name: ${{ env.GitVersion_SemVer }}
        generate_release_notes: true
        prerelease: ${{ github.ref_name != 'main' }}
        files: ./Installer/Elzik.FmSync.WindowsInstaller/bin/x64/Release/en-US/Elzik.FmSync.WindowsInstaller.msi
